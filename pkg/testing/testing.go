package testing

import (
	_ "github.com/smartystreets/goconvey/convey"

	_ "github.com/prashantv/gostub"

	_ "github.com/golang/mock"
	_ "github.com/golang/mock/gomock"

	// _ "github.com/golang/mock/mockgen"

	_ "github.com/agiledragon/gomonkey"
	// _ "github.com/bouk/monkey"
)

// Mock: 模拟的意思，指的是在测试包中创建一个结构体，满足某个外部依赖的接口interface{}
// Stub: 是桩的意思，指的是在测试包中创建一个模拟方法，用于替换生成代码中的方法

// mock的做法是创建一个struct，然后实现所需要接口中的函数，在测试的时候，将调用的接口替换成测试mock出来的struct就可以了。
// mock采用的替换，是替换整个接口的方式(备注：接口可以是入参，也可以是struct中的变量，不过都需要在测试之前，替换完成)。
// 使用stub做单元测试的话，代码是侵入式的，需要将对应的函数做成回调函数的方式，以方便后续的测试代码可以将这个函数替换成，测试希望指定的功能实现。

// 1）mock和stub都是采用替换的方式来实现，被测试的函数中的依赖关系，不过mock采用的是接口替换的方式，stub采用的是函数替代的方式。
// 2）mock的实现对功能代码没有侵入性，stub的侵入性比较强，在实现功能函数的时候，就需要为了测试设置一些回调函数，也就是这里所谓的桩。
// 3）对于控制被替代的方法来讲，mock如果想支持不同的输出，就需要提前实现不同的分支代码，甚至需要定义不同的mock结构体来实现，这样的mock代码会变成一个支持所有逻辑分支的一个最大集合，mock代码复杂性会变高；stub却能很好的控制桩函数的不同分支，因为stub替换的是函数，那么只要需要再用到这种输出的时候，定义一个函数即可，而这个函数甚至都可以是匿名函数。

// gomonkey 1.0 特性列表如下：
// 支持为一个函数打一个桩
// 支持为一个成员方法打一个桩
// 支持为一个全局变量打一个桩
// 支持为一个函数变量打一个桩
// 支持为一个函数打一个特定的桩序列
// 支持为一个成员方法打一个特定的桩序列
// 支持为一个函数变量打一个特定的桩序列
